// Protocol Buffers for Firebird Butler Service Definition v1
// Copyright 2019 Firebird Project.  All rights reserved.
// https://www.firebirdsql.org/
// https://firebird-butler.rtfd.io
//
// License: The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom
// the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package fbsd;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Universal state enumeration

enum State {
  option allow_alias = true ;
   
  UNKNOWN_STATE   = 0 ;
  READY           = 1 ;
  RUNNING         = 2 ;
  WAITING         = 3 ;
  SUSPENDED       = 4 ;
  FINISHED        = 5 ;
  ABORTED         = 6 ;
     
  // Aliases
     
  CREATED         = 1 ;
  BLOCKED         = 3 ;
  STOPPED         = 4 ;
  TERMINATED      = 6 ;
}

// Address domain enumeration

enum AddressDomain {
  UNKNOWN_DOMAIN = 0 ; // Not a valid option, defined only to handle undefined values
  LOCAL = 1 ;          // Within process (inproc)
  NODE = 2 ;           // On single node (ipc or tcp loopback)
  NETWORK = 3 ;        // Network-wide (ip address or domain name)
}

// Transport protocol

enum TransportProtocol {
  UNKNOWN_PROTOCOL = 0 ; // Not a valid option, defined only to handle undefined values
  INPROC = 1 ;
  IPC = 2 ;
  TCP = 3 ;
  PGM = 4 ;
  EPGM = 5 ;
  VMCI = 6 ;
}

// Socket type

enum SocketType {
  UNKNOWN_TYPE = 0 ; // Not a valid option, defined only to handle undefined values
  DEALER = 1 ;
  ROUTER = 2 ;
  PUB = 3 ;
  SUB = 4 ;
  XPUB = 5 ;
  XSUB = 6 ;
  PUSH = 7 ;
  PULL = 8 ;
  STREAM = 9 ;
  PAIR = 10 ;
}

// Socket use

enum SocketUse {
  UNKNOWN_USE = 0 ; // Not a valid option, defined only to handle undefined values
  PRODUCER = 1 ;    // Socket used to provide data to peers
  CONSUMER = 2 ;    // Socket used to get data prom peers
  EXCHANGE = 3 ;    // Socket used for data exchange
}

// Dependency type enumeration

enum DependencyType {
  UNKNOWN_DEPTYPE = 0 ; // Not a valid option, defined only to handle undefined values
  REQUIRED = 1 ;
  PREFERRED = 2 ;
  OPTIONAL = 3 ;
}

// ZMQ endpoint address

message EndpointAddress {
  AddressDomain domain = 1 ;       // [required]
  TransportProtocol protocol = 2 ; // [required]
  string address = 3 ;             // [required]
}

// Butler Development Platform Identification

message PlatformId {
  bytes  uid     = 1 ; // Unique platform ID. It's RECOMMENDED to use uuid version 5 - SHA1, namespace OID.
  string version = 2 ; // <major>[.<minor>]
}

// Butler Service Vendor Identification

message VendorId {
  bytes uid = 1 ; // Unique vendor ID. It's RECOMMENDED to use uuid version 5 - SHA1, namespace OID.
}

// Butler Software Agent Identification (Service/Client Class)

message AgentIdentification {
  bytes  uid                              = 1 ; // Unique Agent ID.
  string name                             = 2 ; // Name assigned by vendor
  string version                          = 3 ; // major[.minor[.build[-tag]]]
  VendorId vendor                         = 4 ;
  PlatformId platform                     = 5 ;
  string classification                   = 6 ;
  repeated google.protobuf.Any supplement = 7 ; // additional information about Agent
}

// Butler Peer Identification (Agent Instance)

message PeerIdentification {
  bytes  uid                              = 1 ; // Unique peer ID. It's RECOMMENDED to use uuid version 1.
  uint32 pid                              = 2 ; // Peer's process ID
  string host                             = 3 ; // host (network node) identification
  repeated google.protobuf.Any supplement = 4 ; // additional information about Peer
}
   
// Interface Specification

message InterfaceSpec {
  uint32 number = 1 ; // Interface Identification Number assigned by Service
  bytes  uid    = 2 ; // Iterface UID
}

// FBSP Service Error Description Record

message ErrorDescription {
  uint64 code                       = 1 ;  // Service-specific error code
  string description                = 2 ;  // Short text description of the error
  google.protobuf.Struct context    = 3 ;  // Structured error context information
  google.protobuf.Struct annotation = 4 ;  // Additional structured error information
}

// Data pipe

message DataPipe {
  string name                             = 1 ; // [required] Pipe name
  SocketType socket_type                  = 2 ; // [required] Socket type
  SocketUse use                           = 3 ; // [required] PRODUCER/CONSUMER
  string protocol                         = 4 ; // [required] Protocol description
  bytes owner                             = 5 ; // [required] if pipe is owned by Saturnin service
                                                // ID of the peer that owns the pipe
  uint32 pid                              = 6 ; // [required] ID of the process that manages the pipe
  string host                             = 7 ; // [required] host (network node) identification where the pipe resides
  repeated EndpointAddress endpoints      = 8 ; // [required] Binded endpoints
  repeated google.protobuf.Any supplement = 9 ; // additional information about pipe
}
