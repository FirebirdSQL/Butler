// Protocol Buffers for Firebird Butler Service Definition v1
// Copyright 2019 Firebird Project.  All rights reserved.
// https://www.firebirdsql.org/
// https://firebird-butler.rtfd.io
//
// License: The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom
// the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package firebird.butler;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Universal state enumeration

enum StateEnum {
  option allow_alias = true ;
   
  STATE_UNKNOWN    = 0 ;
  STATE_READY      = 1 ;
  STATE_RUNNING    = 2 ;
  STATE_WAITING    = 3 ;
  STATE_SUSPENDED  = 4 ;
  STATE_FINISHED   = 5 ;
  STATE_ABORTED    = 6 ;
     
  // Aliases
     
  STATE_CREATED    = 1 ;
  STATE_BLOCKED    = 3 ;
  STATE_STOPPED    = 4 ;
  STATE_TERMINATED = 6 ;
}

// Address domain enumeration

enum AddressDomainEnum {
  DOMAIN_UNKNOWN = 0 ; // Not a valid option, defined only to handle undefined values
  DOMAIN_LOCAL   = 1 ; // Within process (inproc)
  DOMAIN_NODE    = 2 ; // On single node (ipc or tcp loopback)
  DOMAIN_NETWORK = 3 ; // Network-wide (ip address or domain name)
}

// Transport protocol enumeration

enum TransportProtocolEnum {
  PROTOCOL_UNKNOWN = 0 ; // Not a valid option, defined only to handle undefined values
  PROTOCOL_INPROC  = 1 ;
  PROTOCOL_IPC     = 2 ;
  PROTOCOL_TCP     = 3 ;
  PROTOCOL_PGM     = 4 ;
  PROTOCOL_EPGM    = 5 ;
  PROTOCOL_VMCI    = 6 ;
}

// Socket type enumeration

enum SocketTypeEnum {
  SOCKET_TYPE_UNKNOWN = 0 ; // Not a valid option, defined only to handle undefined values
  SOCKET_TYPE_DEALER  = 1 ;
  SOCKET_TYPE_ROUTER  = 2 ;
  SOCKET_TYPE_PUB     = 3 ;
  SOCKET_TYPE_SUB     = 4 ;
  SOCKET_TYPE_XPUB    = 5 ;
  SOCKET_TYPE_XSUB    = 6 ;
  SOCKET_TYPE_PUSH    = 7 ;
  SOCKET_TYPE_PULL    = 8 ;
  SOCKET_TYPE_STREAM  = 9 ;
  SOCKET_TYPE_PAIR    = 10 ;
}

// Socket use enumeration

enum SocketUseEnum {
  SOCKET_USE_UNKNOWN  = 0 ; // Not a valid option, defined only to handle undefined values
  SOCKET_USE_PRODUCER = 1 ; // Socket used to provide data to peers
  SOCKET_USE_CONSUMER = 2 ; // Socket used to get data prom peers
  SOCKET_USE_EXCHANGE = 3 ; // Socket used for data exchange
}

// Dependency type enumeration

enum DependencyTypeEnum {
  DEPTYPE_UNKNOWN   = 0 ; // Not a valid option, defined only to handle undefined values
  DEPTYPE_REQUIRED  = 1 ; // The resource MUST be provided
  DEPTYPE_PREFERRED = 2 ; // The resource SHOULD be provided if available
  DEPTYPE_OPTIONAL  = 3 ; // The resource MAY be provided if available
}

// Butler Development Platform Identification

message PlatformId {
  bytes  uid     = 1 ; // Unique platform ID. It's RECOMMENDED to use uuid version 5 - SHA1, namespace OID.
  string version = 2 ; // major[.minor[.patch[-tag]]].
}

// Butler Service Vendor Identification

message VendorId {
  bytes uid = 1 ; // Unique vendor ID. It's RECOMMENDED to use uuid version 5 - SHA1, namespace OID.
}

// Butler Software Agent Identification (Service/Client Class)

message AgentIdentification {
  bytes                        uid            = 1 ; // Unique Agent ID.
  string                       name           = 2 ; // Name assigned by vendor
  string                       version        = 3 ; // major[.minor[.patch[-tag]]]
  VendorId                     vendor         = 4 ;
  PlatformId                   platform       = 5 ;
  string                       classification = 6 ;
  repeated google.protobuf.Any supplement     = 7 ; // additional information about Agent
}

// Butler Peer Identification (Agent Instance)

message PeerIdentification {
  bytes                        uid        = 1 ; // Unique peer ID. It's RECOMMENDED to use uuid version 1.
  uint32                       pid        = 2 ; // Peer's process ID
  string                       host       = 3 ; // host (network node) identification
  repeated google.protobuf.Any supplement = 4 ; // additional information about Peer
}
   
// Interface Specification

message InterfaceSpec {
  uint32 number = 1 ; // Interface Identification Number assigned by Service
  bytes  uid    = 2 ; // Iterface UID
}

// Error Description Record

message ErrorDescription {
  uint64                 code        = 1 ;  // Service-specific error code
  string                 description = 2 ;  // Short text description of the error
  google.protobuf.Struct context     = 3 ;  // Structured error context information
  google.protobuf.Struct annotation  = 4 ;  // Additional structured error information
}

